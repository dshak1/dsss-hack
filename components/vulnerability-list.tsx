import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { AlertTriangle, AlertCircle, Info, FileCode } from "lucide-react"

interface Vulnerability {
  vulnerability_id: string
  vulnerability_name: string
  severity: string
  category: string
  file: string
  line: number
  code_snippet: string
  pattern_matched: string
}

interface VulnerabilityListProps {
  vulnerabilities: {
    CRITICAL: Vulnerability[]
    HIGH: Vulnerability[]
    MEDIUM: Vulnerability[]
  }
}

export function VulnerabilityList({ vulnerabilities }: VulnerabilityListProps) {
  const getSeverityConfig = (severity: string) => {
    switch (severity) {
      case "CRITICAL":
        return {
          icon: AlertTriangle,
          color: "text-red-500",
          bgColor: "bg-red-500/10",
          badgeVariant: "destructive" as const,
        }
      case "HIGH":
        return {
          icon: AlertCircle,
          color: "text-orange-500",
          bgColor: "bg-orange-500/10",
          badgeVariant: "default" as const,
        }
      case "MEDIUM":
        return {
          icon: Info,
          color: "text-yellow-500",
          bgColor: "bg-yellow-500/10",
          badgeVariant: "secondary" as const,
        }
      default:
        return {
          icon: Info,
          color: "text-muted-foreground",
          bgColor: "bg-muted",
          badgeVariant: "outline" as const,
        }
    }
  }

  const renderVulnerabilityCard = (vuln: Vulnerability) => {
    const config = getSeverityConfig(vuln.severity)
    const Icon = config.icon

    return (
      <div
        key={`${vuln.file}-${vuln.line}-${vuln.vulnerability_id}`}
        className="rounded-lg border border-border bg-card p-4 hover:bg-muted/30 transition-colors"
      >
        <div className="flex items-start gap-4">
          <div className={`rounded-md p-2 ${config.bgColor}`}>
            <Icon className={`h-5 w-5 ${config.color}`} />
          </div>
          <div className="flex-1 space-y-3">
            <div className="flex items-start justify-between gap-4">
              <div>
                <h4 className="font-semibold text-foreground">{vuln.vulnerability_name}</h4>
                <p className="text-sm text-muted-foreground mt-1">
                  {vuln.vulnerability_id} â€¢ {vuln.category}
                </p>
              </div>
              <Badge variant={config.badgeVariant}>{vuln.severity}</Badge>
            </div>

            <div className="flex items-center gap-2 text-sm">
              <FileCode className="h-4 w-4 text-muted-foreground" />
              <span className="font-mono text-muted-foreground">
                {vuln.file}:{vuln.line}
              </span>
            </div>

            <div className="rounded-md bg-muted/50 p-3">
              <pre className="text-xs font-mono text-foreground overflow-x-auto">{vuln.code_snippet}</pre>
            </div>

            <div className="text-xs text-muted-foreground">
              Pattern matched: <code className="font-mono bg-muted px-1.5 py-0.5 rounded">{vuln.pattern_matched}</code>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Detected Vulnerabilities</CardTitle>
        <CardDescription>Detailed findings from security scan</CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="all" className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="all">
              All ({vulnerabilities.CRITICAL.length + vulnerabilities.HIGH.length + vulnerabilities.MEDIUM.length})
            </TabsTrigger>
            <TabsTrigger value="critical">Critical ({vulnerabilities.CRITICAL.length})</TabsTrigger>
            <TabsTrigger value="high">High ({vulnerabilities.HIGH.length})</TabsTrigger>
            <TabsTrigger value="medium">Medium ({vulnerabilities.MEDIUM.length})</TabsTrigger>
          </TabsList>

          <TabsContent value="all" className="space-y-4 mt-6">
            {vulnerabilities.CRITICAL.length === 0 &&
            vulnerabilities.HIGH.length === 0 &&
            vulnerabilities.MEDIUM.length === 0 ? (
              <div className="text-center py-12 text-muted-foreground">No vulnerabilities detected</div>
            ) : (
              <>
                {vulnerabilities.CRITICAL.map(renderVulnerabilityCard)}
                {vulnerabilities.HIGH.map(renderVulnerabilityCard)}
                {vulnerabilities.MEDIUM.map(renderVulnerabilityCard)}
              </>
            )}
          </TabsContent>

          <TabsContent value="critical" className="space-y-4 mt-6">
            {vulnerabilities.CRITICAL.length === 0 ? (
              <div className="text-center py-12 text-muted-foreground">No critical vulnerabilities detected</div>
            ) : (
              vulnerabilities.CRITICAL.map(renderVulnerabilityCard)
            )}
          </TabsContent>

          <TabsContent value="high" className="space-y-4 mt-6">
            {vulnerabilities.HIGH.length === 0 ? (
              <div className="text-center py-12 text-muted-foreground">No high severity vulnerabilities detected</div>
            ) : (
              vulnerabilities.HIGH.map(renderVulnerabilityCard)
            )}
          </TabsContent>

          <TabsContent value="medium" className="space-y-4 mt-6">
            {vulnerabilities.MEDIUM.length === 0 ? (
              <div className="text-center py-12 text-muted-foreground">No medium severity vulnerabilities detected</div>
            ) : (
              vulnerabilities.MEDIUM.map(renderVulnerabilityCard)
            )}
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  )
}
